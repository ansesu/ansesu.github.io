<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PEP8 | ansesu</title>
    <link>https://ansesu.github.io/tag/pep8/</link>
      <atom:link href="https://ansesu.github.io/tag/pep8/index.xml" rel="self" type="application/rss+xml" />
    <description>PEP8</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>pt</language><lastBuildDate>Mon, 07 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ansesu.github.io/images/icon_hub95fb4585be6759ab7858960e095bb0c_3104_512x512_fill_lanczos_center_3.png</url>
      <title>PEP8</title>
      <link>https://ansesu.github.io/tag/pep8/</link>
    </image>
    
    <item>
      <title>PEP8 - Melhores práticas de estilo em Python</title>
      <link>https://ansesu.github.io/post/python-pep8/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://ansesu.github.io/post/python-pep8/</guid>
      <description>&lt;p&gt;Nos últimos tempos, precisei resgatar os códigos de análises que realizei durante o mestrado. Percebi que eles estão um pouco confusos e difíceis de ler. Com intuito de resolver esse problema, decidi buscar entender quais são as melhores práticas de estilo quando programando em Python. Esse post é, então, uma &lt;em&gt;colinha&lt;/em&gt; pra que eu possa sempre estar checando caso esqueça de algo. Pretendo ir atualizando essa página frequentemente na medida em que eu avançar na minha pesquisa. Usei como referência o PEP 8 do site oficial 
&lt;a href=&#34;https://www.python.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python.org&lt;/a&gt;. As PEPs, &lt;em&gt;Python Enhancement Proposals&lt;/em&gt;, são documentos criados para informar os usuários de Python acerca de padrões, novos atributos, seus processos ou seus ambientes 
&lt;a href=&#34;#pep1&#34;&gt;[1]&lt;/a&gt;. Especificamente, a PEP 8 indica os padrões de estilo para quem programa nessa linguagem, a fim de que o código possa ser de mais fácil leitura 
&lt;a href=&#34;#pep8&#34;&gt;[2]&lt;/a&gt;. Então, vamos lá!&lt;/p&gt;
&lt;p&gt;(O código aqui mostrado foi copiado da referência 
&lt;a href=&#34;#pep8&#34;&gt;[2]&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;Lista de Conteúdos&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#layout-do-código&#34;&gt;Layout do código&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#indentação&#34;&gt;Indentação&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#espaço-ou-tab&#34;&gt;Espaço ou tab?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#tamanho-máximo-da-linha&#34;&gt;Tamanho máximo da linha&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#operadores-binários-e-quebra-de-linha&#34;&gt;Operadores binários e quebra de linha&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#linhas-brancas&#34;&gt;Linhas brancas&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#source-file-encoding&#34;&gt;Source File Encoding&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#imports&#34;&gt;Imports&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#referências&#34;&gt;Referências&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h2 id=&#34;layout-do-código&#34;&gt;Layout do código&lt;/h2&gt;
&lt;h3 id=&#34;indentação&#34;&gt;Indentação&lt;/h3&gt;
&lt;p&gt;Padrão: 4 espaços por nível de indentação&lt;/p&gt;
&lt;!-- Continuation lines should align wrapped elements either vertically using Python&#39;s implicit line joining inside parentheses, brackets and braces, or using a hanging indent [7]. When using a hanging indent the following should be considered; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line: --&gt;
&lt;p&gt;Algumas maneiras corretas de utilizar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Alinhamento com o delimitador inicial &amp;quot;(&amp;quot;.
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

# Adição de 4 espaços (um nível adicional de indentação) para distinguir a função de seus argumentos.
def long_function_name(
        var_one, var_two, var_three,
        var_four):
    print(var_one)

# A indentação flutuante deve sempre adicionar um nível. 
# No exemplo abaixo, não há um nível anterior, porém, ainda assim adicionamos um nível.
foo = long_function_name(
    var_one, var_two,
    var_three, var_four
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Porém, em algumas ocasiões, é necessário escolher qual das opções é mais adequada para situação:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Errado. Não é possível distinguir os argumentos e o conteúdo da função.
def long_function_name(
    var_one, var_two, var_three,
    var_four):
    print(var_one)
# Correto.
def long_function_name(var_one, var_two, 
                        var_three, var_four):
	print(var_one)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;indentação-estrutura-condicional-if&#34;&gt;Indentação: estrutura condicional if&lt;/h4&gt;
&lt;p&gt;Quando um condicional &lt;span class=&#34;markup-quote&#34;&gt;if&lt;/span&gt; é muito longo, pode ser que haja um problema ao quebrá-lo em múltiplas linhas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if (this_is_one_thing and
    that_is_another_thing):
    do_something()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Não conseguimos distinguir o condicional e seu conteúdo justamente porque a parte &lt;span class=&#34;markup-quote&#34;&gt;if (&lt;/span&gt; contém quatro caracteres. Duas possíveis opções são:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Adicione um comentário entre as linhas.
if (this_is_one_thing and
    that_is_another_thing):
    # Since both conditions are true, we can frobnicate.
    do_something()

# Adicione uma indentação na próxima linha do condicional.
if (this_is_one_thing
        and that_is_another_thing):
    do_something()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;indentação-colcheteparênteseschaves&#34;&gt;Indentação: colchete/parênteses/chaves&lt;/h4&gt;
&lt;p&gt;Além disso, o colchete/parênteses/chaves que fecha uma construção em multi-linha pode se alinhar com o primeiro caractere (não-espaço) da última linha da lista&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [
    1, 2, 3,
    4, 5, 6,
    ]
result = some_function_that_takes_arguments(
    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,
    &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,
    )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ou alinhar com o primeiro caractere da linha que inicia a lista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [
    1, 2, 3,
    4, 5, 6,
]
result = some_function_that_takes_arguments(
    &#39;a&#39;, &#39;b&#39;, &#39;c&#39;,
    &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;espaço-ou-tab&#34;&gt;Espaço ou tab?&lt;/h3&gt;
&lt;p&gt;Padrão: espaços são preferíveis a tabs.&lt;/p&gt;
&lt;p&gt;No caso em que a indentação de algum código já está em tab, pode se usar tab para casar os padrões. Porém, começando um projeto do zero, é usar espaços (quatro)!&lt;/p&gt;
&lt;h3 id=&#34;tamanho-máximo-da-linha&#34;&gt;Tamanho máximo da linha&lt;/h3&gt;
&lt;p&gt;Padrão: limite de 79 caracteres por linha (no geral). Para docstrings e comentários, o tamanho máximo deve ser limitado a 72 caracteres.&lt;/p&gt;
&lt;p&gt;Achei meio estranho limitar o tamanho da linha em 79 caracteres, mas o PEP 8 menciona dois motivos pelos quais essa escolha pode ser interessante (além da padronização):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Esse tamanho permite abrir dois códigos lado a lado, o que ajuda em revisões, por exemplo;&lt;/li&gt;
&lt;li&gt;Certos editores tem um tamanho de linha máxima de 80 caracteres. Tamanhos maiores do que esse &amp;ldquo;estragariam&amp;rdquo; a formatação do código, tornando-o de difícil leitura. Assim, o limite de 79 caracteres é um limite seguro (por um caractere).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Porém, para uma equipe que prefere linhas mais longas e possui um código que é exclusivamente/primariamente mantido por ela, se chegarem a um consenso, não há problema em aumentar o tamanho da linha para até 99 caracteres.&lt;/p&gt;
&lt;p&gt;Para auxiliar na padronização, o 
&lt;a href=&#34;https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jupyter Noteboook Extensions&lt;/a&gt; conta com uma ferramenta chamada &lt;span class=&#34;markup-quote&#34;&gt;ruler&lt;/span&gt; para mostrar uma linha vertical no limite imposto pelo próprio usuário. Abaixo uma figura de um pedaço do meu código mostrando essa ferramenta.&lt;/p&gt;





  
  











&lt;figure id=&#34;figure-exemplo-de-código-com-a-ferramenta-ruler-do-jupyter-notebook-extensions&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://ansesu.github.io/post/python-pep8/img/ruler_jupyter_hu25c5c2ff0017a65e26589dbedbef0d7b_72447_2000x2000_fit_lanczos_3.png&#34; data-caption=&#34;Exemplo de código com a ferramenta ruler do Jupyter Notebook Extensions.&#34;&gt;


  &lt;img data-src=&#34;https://ansesu.github.io/post/python-pep8/img/ruler_jupyter_hu25c5c2ff0017a65e26589dbedbef0d7b_72447_2000x2000_fit_lanczos_3.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; width=&#34;833&#34; height=&#34;580&#34;&gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Exemplo de código com a ferramenta ruler do Jupyter Notebook Extensions.
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;Para quebrar linhas, recomenda-se encapsular a expressão dentro de parênteses, chaves ou colchetes. Quando isso não é aplicável, é possível também usar a barra invertida para quebrar linhas, mas esse é o menos preferível. Por exemplo, quando se declara &lt;span class=&#34;markup-quote&#34;&gt;with&lt;/span&gt; ou &lt;span class=&#34;markup-quote&#34;&gt;assert&lt;/span&gt;, não é possível usar a continuação implícita:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&#39;/path/to/some/file/you/want/to/read&#39;) as file_1, \
     open(&#39;/path/to/some/file/being/written&#39;, &#39;w&#39;) as file_2:
    file_2.write(file_1.read())
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operadores-binários-e-quebra-de-linha&#34;&gt;Operadores binários e quebra de linha&lt;/h3&gt;
&lt;p&gt;Padrão: escrever os operadores no início de uma nova linha.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;income = (gross_wages
          + taxable_interest
          + (dividends - qualified_dividends)
          - ira_deduction
          - student_loan_interest)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;É possível melhor entender a relação entre as variáveis descritas. No caso mostrado acima, percebe-se que existem quantidades que devem ser somadas, pois indicam um crédito, e outras subtraídas uma vez que indicam um débito. A posição do operador no início é conveniente, pois a operação sendo realizada é explícita, além do que todos os operadores ficam alinhados, o que melhora a legibilidade do código.&lt;/p&gt;
&lt;h3 id=&#34;linhas-brancas&#34;&gt;Linhas brancas&lt;/h3&gt;
&lt;p&gt;Padrões:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;O início das definições de funções e classes devem começar com duas linhas brancas;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definições de métodos dentro de classes devem ser envoltos de uma linha branca;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linhas brancas podem ser usadas para separar grupos de funções correlatas;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linhas brancas podem ser usadas em funções para separar seções lógicas;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python aceita o comando &lt;span class=&#34;markup-quote&#34;&gt;Ctrl+L&lt;/span&gt; para introduzir um espaço em branco, apesar de outras ferramentas usam esses caracteres como separadores de página.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;source-file-encoding&#34;&gt;Source File Encoding&lt;/h3&gt;
&lt;p&gt;Uma pequena e resumida explicação sobre codificação de caracteres:&lt;/p&gt;
&lt;p&gt;Cada caractere é armazenado em computadores como uma string de &lt;em&gt;bits&lt;/em&gt; &amp;ndash; zeros e uns &amp;ndash; ou um conjunto dessas strings. Cada sequência de 8 &lt;em&gt;bits&lt;/em&gt; compõe 1 &lt;em&gt;byte&lt;/em&gt;. Os sistemas de decodificação transformam a informação em &lt;em&gt;bits&lt;/em&gt; para linguagem humana escrita.&lt;/p&gt;
&lt;p&gt;O ASCII (&lt;em&gt;American Standard Code for Information Interchange&lt;/em&gt;) é um sistema de codificação para todos os caracteres presentes na lingua inglesa. Nele, cada caractere é representado por um único &lt;em&gt;byte&lt;/em&gt;. Dessa forma, apenas 128 bytes são necessários para representar todos os caracteres e símbolos contidos na língua inglesa.&lt;/p&gt;
&lt;p&gt;O padrão UTF-8 (&lt;em&gt;8-bit Unicode Transformation Format&lt;/em&gt;), por sua vez, engloba caracteres de outras línguas e até emojis. Esse feito não é possível no padrão ASCII, pois os caracteres têm um tamanho fixo de um &lt;em&gt;byte&lt;/em&gt;. Dessa forma, existe um limite de $2^{8} = 256$ possíveis caracteres únicos em ASCII.&lt;/p&gt;
&lt;p&gt;No UTF-8, qualquer 
&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_Unicode_characters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;caractere &lt;em&gt;Unicode&lt;/em&gt;&lt;/a&gt; pode ser traduzido para uma sequência de números binários e vice-versa. É dessa forma que surge o nome &amp;ldquo;formato de transformação unicode&amp;rdquo;, isto é, &lt;em&gt;Unicode Transformation Format&lt;/em&gt;. Cada unidade de código é composto por 8 bits (1 &lt;em&gt;byte&lt;/em&gt;) e, assim, temos o &lt;em&gt;&lt;strong&gt;8-bit&lt;/strong&gt; Unicode Transformation Format&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Diferentemente do ASCII, até quatro unidades de código (4 &lt;em&gt;bytes&lt;/em&gt;) podem ser utilizadas para representar um caractere, isto é, sua forma decodificada. &lt;strong&gt;Até&lt;/strong&gt; quatro unidades porque a quantidade é dinâmica, &amp;ldquo;poupando&amp;rdquo; espaço quando possível. Por outro lado, a forma codificada (o que chamamos de 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Code_point&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;code point&lt;/em&gt;&lt;/a&gt;) é totalmente definida em termos do padrão de codificação &lt;em&gt;Unicode&lt;/em&gt; especificado. O &lt;em&gt;code point&lt;/em&gt; é um valor inteiro, especificado de acordo com uma representação hexadecimal. Assim, existem 1,114,112 &lt;em&gt;code points&lt;/em&gt; (de $0$ a $10FFFF$ ou $17\cdot16^{4}$) divididos em até 
&lt;a href=&#34;https://en.wikipedia.org/wiki/Plane_%28Unicode%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;17 planos&lt;/a&gt;, que correspondem ao prefixo de $0$ a $10$ em notação hexadecimal.&lt;/p&gt;
&lt;p&gt;Por exemplo, o caractere &amp;ldquo;A&amp;rdquo; é representado pelo &lt;em&gt;code point&lt;/em&gt; &lt;strong&gt;U+0041&lt;/strong&gt; (U+número hexadecimal do &lt;em&gt;code point&lt;/em&gt;) e tem a representação binária &lt;strong&gt;01000001&lt;/strong&gt; (1 &lt;em&gt;byte&lt;/em&gt;). Enquanto isso, o caractere &amp;ldquo;あ&amp;rdquo; do alfabeto japonês &lt;em&gt;hiragana&lt;/em&gt; &amp;ndash; que também se lê &amp;ldquo;a&amp;rdquo; &amp;ndash; é representado pelo &lt;em&gt;code point&lt;/em&gt; &lt;strong&gt;U+3042&lt;/strong&gt; e tem representação binária de três &lt;em&gt;bytes&lt;/em&gt;: &lt;strong&gt;11100011&lt;/strong&gt;, &lt;strong&gt;10000001&lt;/strong&gt; e &lt;strong&gt;10000010&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Os primeiros 256 caracteres da biblioteca &lt;em&gt;Unicode&lt;/em&gt; são aqueles presentes no ASCII, estes representados apenas por um &lt;em&gt;byte&lt;/em&gt;. Portanto, a biblioteca ASCII é um sub-conjunto do UTF-8 e textos em ASCII têm compatibilidade com textos em UTF-8.&lt;/p&gt;
&lt;p&gt;Padrões:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;O código no &lt;em&gt;core&lt;/em&gt; da distribuição Python deve sempre usar UTF-8 (ou ASCII na versão Python 2);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arquivos usando ASCII (em Python 2) ou UTF-8 (em Python 3) não devem ter uma declaração de &lt;em&gt;encoding&lt;/em&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nas bibliotecas padrões, &lt;em&gt;encodings&lt;/em&gt; não-padrões devem ser usadas apenas com propósito de teste, ou quando um comentário/&lt;em&gt;docstring&lt;/em&gt; precisa mencionar um nome de autor que contém caracteres não-ASCII; caso contrário, preferencialmente inclui-se dados não-ASCII por meio dos escapes \x, \u, \U ou \N;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Para versões de Python acima da 3.0, os identificadores (nome dado a classes, funcões, variáveis etc) devem conter apenas caracteres ASCII e usar palavras em inglês sempre que possível (em vários casos, abreviações e termos técnicos são usados e não são em inglês). Além disso, strings e comentários também devem estar em ASCII. As exceções são as seguintes: (a) em caso de teste de &lt;em&gt;features&lt;/em&gt; não-ASCII; (b) nome de autores. Autores cujos nomes não são baseados no alfabeto latino (set de caracteres latin-1, ISO/IEC 8859-1) devem fornecer uma transliteração dos nomes em ASCII;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projetos &lt;em&gt;open source&lt;/em&gt; com público global são encorajados a adotar políticas similares.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;imports&#34;&gt;Imports&lt;/h3&gt;
&lt;p&gt;Padrões&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Os imports de bibliotecas devem estar em linhas separadas:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Correto.
import os
import sys
# Errado.
import os, sys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Porém, pode-se fazer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from subprocess import Popen, PIPE
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Os imports devem ser colocados sempre no topo do arquivo, logo depois de qualquer comentário do módulo ou &lt;em&gt;docstrings&lt;/em&gt;, e antes de variáveis globais ou constantes do módulo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Em geral, devem ser agrupados na seguinte ordem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Imports da biblioteca padrão;&lt;/li&gt;
&lt;li&gt;Imports de programas de terceiros;&lt;/li&gt;
&lt;li&gt;Imports de aplicações locais/bibliotecas específicas.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Deve haver uma linha branca separando cada grupo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imports absolutos &amp;ndash; especificando o caminho inteiro até o pacote &amp;ndash; são recomendados, porque eles geralmente são mais legíveis e tendem a se comportar melhor (ou ao menos dar mensagens de erro melhores) se o sistema de importação estiver configurado incorretamente (como quando um diretório dente do pacote acaba no sys.path):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import mypkg.sibling
from mypkg import sibling
from mypkg.sibling import example
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Porém, imports relativos explícitos &amp;ndash; especificando o caminho relativo da posição atual até o pacote &amp;ndash; são uma alternativa aceitável a imports absolutos, especialmente quando se lida com layouts complexos de pacotes quando o uso de imports absolutos seria desnecessariamente prolixo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from . import sibling
from .sibling import example
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Código de bibliotecas padrões deve sempre evitar layouts complexos de pacotes e sempre usar imports absolutos.&lt;/p&gt;
&lt;p&gt;Imports relativos implícitos nunca devem ser utilizados e foram removidos do Python 3.&lt;/p&gt;
&lt;h2 id=&#34;referências&#34;&gt;Referências&lt;/h2&gt;
&lt;p&gt;&lt;a name=&#34;pep1&#34;&gt; [1] 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 1 &amp;ndash; PEP Purpose and Guidelines.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;pep8&#34;&gt; [2] 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 8 &amp;ndash; Style Guide for Python Code.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://blog.hubspot.com/website/what-is-utf-8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is UTF-8 Encoding? A Guide for Non-Programmers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/27331819/whats-the-difference-between-a-character-a-code-point-a-glyph-and-a-grapheme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What&amp;rsquo;s the difference between a character, a code point, a glyph and a grapheme?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
