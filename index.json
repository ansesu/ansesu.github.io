[{"authors":["assunahara"],"categories":null,"content":"Doutor em Física pelo ComplexLab @ Universidade Estadual de Maringá\n","date":1701734400,"expirydate":-62135596800,"kind":"term","lang":"pt","lastmod":1701734400,"objectID":"d10735df0444664a274d98fd2bf2d098","permalink":"https://ansesu.github.io/author/andre-s.-sunahara/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/andre-s.-sunahara/","section":"authors","summary":"Doutor em Física pelo ComplexLab @ Universidade Estadual de Maringá","tags":null,"title":"André S. Sunahara","type":"authors"},{"authors":["André S. Sunahara","Matjaz Perc","Haroldo V. Ribeiro"],"categories":null,"content":"","date":1701734400,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1701734400,"objectID":"d58af1933cfcc415d7bc798ba32019b4","permalink":"https://ansesu.github.io/publication/2023/universal-productivity-patterns-in-research-careers/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/publication/2023/universal-productivity-patterns-in-research-careers/","section":"publication","summary":"A common expectation is that career productivity peaks rather early and then gradually declines with seniority. But whether this holds true is still an open question. Here we investigate the productivity trajectories of almost 8500 scientists from over 50 disciplines using methods from time-series analysis, dimensionality reduction, and network science, showing that there exist six universal productivity patterns in research. Based on clusters of productivity trajectories and network representations where researchers with similar productivity patterns are connected, we identify constant, u-shaped, decreasing, periodic-like, increasing, and canonical productivity patterns, with the latter two describing almost three-fourths of researchers. In fact, we find that canonical curves are the most prevalent, but contrary to expectations, productivity peaks occur much more frequently around midcareer rather than early. These results outline the boundaries of possible career paths in science and caution against the adoption of stereotypes in tenure and funding decisions.","tags":["Ciência da ciência","Sistemas complexos","Produtividade"],"title":"Universal productivity patterns in research careers","type":"publication"},{"authors":["André S. Sunahara","Arthur Augusto Barizon Pessa","Matjaz Perc","Haroldo V. Ribeiro"],"categories":null,"content":"","date":1691107200,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1691107200,"objectID":"c3d84671256ed5d3413d974f8eadeb28","permalink":"https://ansesu.github.io/publication/2023/complexity-of-the-covid19-pandemic-in-maringa/","publishdate":"2023-08-04T00:00:00Z","relpermalink":"/publication/2023/complexity-of-the-covid19-pandemic-in-maringa/","section":"publication","summary":"While extensive literature exists on the COVID-19 pandemic at regional and national levels, understanding its dynamics and consequences at the city level remains limited. This study investigates the pandemic in Maringá, a medium-sized city in Brazil's South Region, using data obtained by actively monitoring the disease from March 2020 to June 2022. Despite prompt and robust interventions, COVID-19 cases increased exponentially during the early spread of COVID-19, with a reproduction number lower than that observed during the initial outbreak in Wuhan. Our research demonstrates the remarkable impact of non-pharmaceutical interventions on both mobility and pandemic indicators, particularly during the onset and the most severe phases of the emergency. However, our results suggest that the city's measures were primarily reactive rather than proactive. Maringá faced six waves of cases, with the third and fourth waves being the deadliest, responsible for over two-thirds of all deaths and overwhelming the local healthcare system. Excess mortality during this period exceeded deaths attributed to COVID-19, indicating that the burdened healthcare system may have contributed to increased mortality from other causes. By the end of the fourth wave, nearly three-quarters of the city's population had received two vaccine doses, significantly decreasing deaths despite the surge caused by the Omicron variant. Finally, we compare these findings with the national context and other similarly sized cities, highlighting substantial heterogeneities in the spread and impact of the disease.","tags":["COVID-19","Maringá"],"title":"Complexity of the COVID-19 pandemic in Maringá","type":"publication"},{"authors":null,"categories":null,"content":"","date":1633046400,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1633046400,"objectID":"b13d40e4e16793b46c94904f35f7f515","permalink":"https://ansesu.github.io/news/fapesp-2021/","publishdate":"2021-10-01T00:00:00Z","relpermalink":"/news/fapesp-2021/","section":"news","summary":"Ao analisar a produção científica ao longo da carreira de mais de 6 mil pesquisadores brasileiros de 14 disciplinas, a equipe do físico Haroldo Ribeiro, da Universidade Estadual de Maringá, no Paraná, identificou padrões distintos de comportamento em relação à publicação de artigos.","tags":["Ciência da ciência","Fapesp","Produtividade","Impacto de jornal"],"title":"Engrenagens do conhecimento","type":"news"},{"authors":["André S. Sunahara","Matjaz Perc","Haroldo V. Ribeiro"],"categories":null,"content":"","date":1629072000,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1629072000,"objectID":"f7a6212d95b8d4416e6de58fe6cdec6f","permalink":"https://ansesu.github.io/publication/2021/association-between-productivity-and-journal-impact-across-disciplines-and-career-age/","publishdate":"2021-08-16T00:00:00Z","relpermalink":"/publication/2021/association-between-productivity-and-journal-impact-across-disciplines-and-career-age/","section":"publication","summary":"The association between productivity and impact of scientific production is a long-standing debate in science that remains controversial and poorly understood. Here we present a large-scale analysis of the association between yearly publication numbers and average journal-impact metrics for the Brazilian scientific elite. We find this association to be discipline specific, career age dependent, and similar among researchers with outlier and nonoutlier performance. Outlier researchers either outperform in productivity or journal prestige, but they rarely do so in both categories. Nonoutliers also follow this trend and display negative correlations between productivity and journal prestige but with discipline-dependent intensity. Our research indicates that academics are averse to simultaneous changes in their productivity and journal-prestige levels over consecutive career years. We also find that career patterns concerning productivity and journal prestige are discipline-specific, having in common a raise of productivity with career age for most disciplines and a higher chance of outperforming in journal impact during early career stages.","tags":["Ciência da ciência","Produtividade","Impacto de jornal"],"title":"Association between productivity and journal impact across disciplines and career age","type":"publication"},{"authors":null,"categories":null,"content":"","date":1625702400,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1625702400,"objectID":"8ba919c97644e470d04402ba91cfe315","permalink":"https://ansesu.github.io/news/conexao-covid/","publishdate":"2021-07-08T00:00:00Z","relpermalink":"/news/conexao-covid/","section":"news","summary":"Três físicos da UEM fundaram o Observatório COVID-19 Maringá, um site que surgiu da necessidade de registrar e analisar dados sobre a pandemia da Covid-19 na cidade.","tags":["COVID-19","Maringá"],"title":"A pandemia em dados: a Covid-19 decifrada para a sociedade","type":"news"},{"authors":["Andre"],"categories":[],"content":" De acordo com Crameri et al., \u0026ldquo;a representação precisa dos dados é essencial na comunicação científica\u0026rdquo; [1]. De fato, a escolha do tipo mais adequado de visualização de acordo com as características dos dados é imprescindível para comunicar os resultados de uma pesquisa científica. Por exemplo, o gráfico abaixo mostra a evolução temporal do número de reprodução efetivo $R(t)$ referente ao espalhamento da COVID-19 em Maringá. Ao representar valores acima de um, que indicam o aceleramento da propagação do vírus, em vermelho, e valores abaixo de um, que indicam o desaceleramento da propagação, em verde, podemos comunicar visualmente o ritmo de transmissão do vírus.\nFigura 1: gráfico de linha com intervalo de confiança e cores diferentes definidas por um limite. Valores acima do limite são coloridos de vermelho, enquanto valores abaixo desse mesmo limite são coloridos de verde. Visualização inspirada no site rt.live. O tamanho dos elementos também faz diferença quando representamos dados. A figura abaixo mostra o valor das minhas sequências ouvindo as mesmas faixas de determinado artista ou faixas únicas durante o ano de 2022. O tamanho dos marcadores varia com o tamanho da sequência, comunicando visualmente o tamanho da sequência.\nArtista Faixa\nFigura 2: scatter plot com tamanho do marker variável de acordo com valor da variável (com botão para troca de categoria). Em outro exemplo, a figura abaixo mostra o volume de faixas dos dez artistas mais ouvidos por mim durante 2022. Nesse contexto, faz sentido utilizar um gráfico de fluxo (stream chart) uma vez que, pela sua utilização, é possível transmitir a ideia de volume.\nFigura 3: stream chart plot. A seguir, apresento mais algumas figuras confeccionadas por meio do pacote d3.js e os respectivos tutoriais, além de alguns recursos que podem auxiliar no aprendizado de visualização de dados em geral. O código fonte para os gráficos podem ser acessados nesta página.\nGráfico de linha Total COVID\nFigura 4: figura com vários paineis (com botão para troca de categoria). Cada painel contém um gráfico de linha preenchido. Gráfico de barra Reload\nFigura 5: gráfico de corrida de barras. Média móvel Figura 6: gráfico de barras com média móvel e linha do tempo adjacente (com botão para desativação da média móvel). Mapa Casos Mortes\nFigura 7: mapa com escala de cor dependente da amplitude da variável (com botão para troca de categoria). Rede Figura 8: force-directed graph. Recursos - colorbrewer2\n- d3-time-format\n- SVG Attribute reference\n- D3 6.0 migration guide\n- How to Resize an SVG When the Window is Resized in d3.js\n- Scatterplot with tooltips\n- Multiline chart\n- Multiline chart with mouseover\n- Barplot\n- Barplot with button to change input\n- Barplot with clickable legend\n- Grouped barplot\n- Circular barplot\n- Bar chart race\n- Streamplot\n- Streamplot with transitions\n- Map\n- Force-directed graph\n- rt.live\nReferências [1] F. Crameri, G. E. Shephard, P. J. Heron, The misuse of colour in science communication. Nature Communications 11, 5444 (2020).\n[2] Scott, A. Interactive Data Visualization for the Web (O\u0026rsquo;Reilly Media, 2013)\n[3] Wilke, C. O. Fundamentals of Data Visualization (O\u0026rsquo;Reilly Media, 2019)\n","date":1622851200,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1622851200,"objectID":"6cbcb5cc038e6e3a6ae8bcb18eda053b","permalink":"https://ansesu.github.io/post/d3-visualizations/","publishdate":"2021-06-05T00:00:00Z","relpermalink":"/post/d3-visualizations/","section":"post","summary":"De acordo com Crameri et al., \u0026ldquo;a representação precisa dos dados é essencial na comunicação científica\u0026rdquo; [1]. De fato, a escolha do tipo mais adequado de visualização de acordo com as características dos dados é imprescindível para comunicar os resultados de uma pesquisa científica. Por exemplo, o gráfico abaixo mostra a evolução temporal do número de reprodução efetivo $R(t)$ referente ao espalhamento da COVID-19 em Maringá.","tags":["Visualização","d3.js"],"title":"Visualização de dados com d3.js","type":"post"},{"authors":["Andre"],"categories":[],"content":"Nos últimos tempos, precisei resgatar os códigos de análises que realizei durante o mestrado. Percebi que eles estão um pouco confusos e difíceis de ler. Com intuito de resolver esse problema, decidi buscar entender quais são as melhores práticas de estilo quando programando em Python. Esse post é, então, uma colinha pra que eu possa sempre estar checando caso esqueça de algo. Pretendo ir atualizando essa página frequentemente na medida em que eu avançar na minha pesquisa. Usei como referência o PEP 8 do site oficial python.org. As PEPs, Python Enhancement Proposals, são documentos criados para informar os usuários de Python acerca de padrões, novos atributos, seus processos ou seus ambientes [1]. Especificamente, a PEP 8 indica os padrões de estilo para quem programa nessa linguagem, a fim de que o código possa ser de mais fácil leitura [2]. Então, vamos lá!\n(O código aqui mostrado foi copiado da referência [2])\nLista de Conteúdos Layout do código Indentação Espaço ou tab? Tamanho máximo da linha Operadores binários e quebra de linha Linhas brancas Source File Encoding Imports Referências Layout do código Indentação Padrão: 4 espaços por nível de indentação\nAlgumas maneiras corretas de utilizar:\n# Alinhamento com o delimitador inicial \u0026quot;(\u0026quot;. foo = long_function_name(var_one, var_two, var_three, var_four) # Adição de 4 espaços (um nível adicional de indentação) para distinguir a função de seus argumentos. def long_function_name( var_one, var_two, var_three, var_four): print(var_one) # A indentação flutuante deve sempre adicionar um nível. # No exemplo abaixo, não há um nível anterior, porém, ainda assim adicionamos um nível. foo = long_function_name( var_one, var_two, var_three, var_four ) Porém, em algumas ocasiões, é necessário escolher qual das opções é mais adequada para situação:\n# Errado. Não é possível distinguir os argumentos e o conteúdo da função. def long_function_name( var_one, var_two, var_three, var_four): print(var_one) # Correto. def long_function_name(var_one, var_two, var_three, var_four): print(var_one) Indentação: estrutura condicional if Quando um condicional if é muito longo, pode ser que haja um problema ao quebrá-lo em múltiplas linhas:\nif (this_is_one_thing and that_is_another_thing): do_something() Não conseguimos distinguir o condicional e seu conteúdo justamente porque a parte if ( contém quatro caracteres. Duas possíveis opções são:\n# Adicione um comentário entre as linhas. if (this_is_one_thing and that_is_another_thing): # Since both conditions are true, we can frobnicate. do_something() # Adicione uma indentação na próxima linha do condicional. if (this_is_one_thing and that_is_another_thing): do_something() Indentação: colchete/parênteses/chaves Além disso, o colchete/parênteses/chaves que fecha uma construção em multi-linha pode se alinhar com o primeiro caractere (não-espaço) da última linha da lista\nmy_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) ou alinhar com o primeiro caractere da linha que inicia a lista:\nmy_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) Espaço ou tab? Padrão: espaços são preferíveis a tabs.\nNo caso em que a indentação de algum código já está em tab, pode se usar tab para casar os padrões. Porém, começando um projeto do zero, é usar espaços (quatro)!\nTamanho máximo da linha Padrão: limite de 79 caracteres por linha (no geral). Para docstrings e comentários, o tamanho máximo deve ser limitado a 72 caracteres.\nAchei meio estranho limitar o tamanho da linha em 79 caracteres, mas o PEP 8 menciona dois motivos pelos quais essa escolha pode ser interessante (além da padronização):\nEsse tamanho permite abrir dois códigos lado a lado, o que ajuda em revisões, por exemplo; Certos editores tem um tamanho de linha máxima de 80 caracteres. Tamanhos maiores do que esse \u0026ldquo;estragariam\u0026rdquo; a formatação do código, tornando-o de difícil leitura. Assim, o limite de 79 caracteres é um limite seguro (por um caractere). Porém, para uma equipe que prefere linhas mais longas e possui um código que é exclusivamente/primariamente mantido por ela, se chegarem a um consenso, não há problema em aumentar o tamanho da linha para até 99 caracteres.\nPara auxiliar na padronização, o Jupyter Noteboook Extensions conta com uma ferramenta chamada ruler para mostrar uma linha vertical no limite imposto pelo próprio usuário. Abaixo uma figura de um pedaço do meu código mostrando essa ferramenta.\nExemplo de código com a ferramenta ruler do Jupyter Notebook Extensions. Para quebrar linhas, recomenda-se encapsular a expressão dentro de parênteses, chaves ou colchetes. Quando isso não é aplicável, é possível também usar a barra invertida para quebrar linhas, mas esse é o menos preferível. Por exemplo, quando se declara with ou assert, não é possível usar a continuação implícita:\nwith open('/path/to/some/file/you/want/to/read') as file_1, \\ open('/path/to/some/file/being/written', 'w') as file_2: file_2.write(file_1.read()) Operadores binários e quebra de linha Padrão: escrever os operadores no início de uma nova linha.\nincome = (gross_wages + taxable_interest + (dividends - qualified_dividends) - ira_deduction - student_loan_interest) É possível melhor entender a relação entre as variáveis descritas. No caso mostrado acima, percebe-se que existem quantidades que devem ser somadas, pois indicam um crédito, e outras subtraídas uma vez que indicam um débito. A posição do operador no início é conveniente, pois a operação sendo realizada é explícita, além do que todos os operadores ficam alinhados, o que melhora a legibilidade do código.\nLinhas brancas Padrões:\nO início das definições de funções e classes devem começar com duas linhas brancas;\nDefinições de métodos dentro de classes devem ser envoltos de uma linha branca;\nLinhas brancas podem ser usadas para separar grupos de funções correlatas;\nLinhas brancas podem ser usadas em funções para separar seções lógicas;\nPython aceita o comando Ctrl+L para introduzir um espaço em branco, apesar de outras ferramentas usam esses caracteres como separadores de página.\nSource File Encoding Uma pequena e resumida explicação sobre codificação de caracteres:\nCada caractere é armazenado em computadores como uma string de bits \u0026ndash; zeros e uns \u0026ndash; ou um conjunto dessas strings. Cada sequência de 8 bits compõe 1 byte. Os sistemas de decodificação transformam a informação em bits para linguagem humana escrita.\nO ASCII (American Standard Code for Information Interchange) é um sistema de codificação para todos os caracteres presentes na lingua inglesa. Nele, cada caractere é representado por um único byte. Dessa forma, apenas 128 bytes são necessários para representar todos os caracteres e símbolos contidos na língua inglesa.\nO padrão UTF-8 (8-bit Unicode Transformation Format), por sua vez, engloba caracteres de outras línguas e até emojis. Esse feito não é possível no padrão ASCII, pois os caracteres têm um tamanho fixo de um byte. Dessa forma, existe um limite de $2^{8} = 256$ possíveis caracteres únicos em ASCII.\nNo UTF-8, qualquer caractere Unicode pode ser traduzido para uma sequência de números binários e vice-versa. É dessa forma que surge o nome \u0026ldquo;formato de transformação unicode\u0026rdquo;, isto é, Unicode Transformation Format. Cada unidade de código é composto por 8 bits (1 byte) e, assim, temos o 8-bit Unicode Transformation Format.\nDiferentemente do ASCII, até quatro unidades de código (4 bytes) podem ser utilizadas para representar um caractere, isto é, sua forma decodificada. Até quatro unidades porque a quantidade é dinâmica, \u0026ldquo;poupando\u0026rdquo; espaço quando possível. Por outro lado, a forma codificada (o que chamamos de code point) é totalmente definida em termos do padrão de codificação Unicode especificado. O code point é um valor inteiro, especificado de acordo com uma representação hexadecimal. Assim, existem 1,114,112 code points (de $0$ a $10FFFF$ ou $17\\cdot16^{4}$) divididos em até 17 planos, que correspondem ao prefixo de $0$ a $10$ em notação hexadecimal.\nPor exemplo, o caractere \u0026ldquo;A\u0026rdquo; é representado pelo code point U+0041 (U+número hexadecimal do code point) e tem a representação binária 01000001 (1 byte). Enquanto isso, o caractere \u0026ldquo;あ\u0026rdquo; do alfabeto japonês hiragana \u0026ndash; que também se lê \u0026ldquo;a\u0026rdquo; \u0026ndash; é representado pelo code point U+3042 e tem representação binária de três bytes: 11100011, 10000001 e 10000010.\nOs primeiros 256 caracteres da biblioteca Unicode são aqueles presentes no ASCII, estes representados apenas por um byte. Portanto, a biblioteca ASCII é um sub-conjunto do UTF-8 e textos em ASCII têm compatibilidade com textos em UTF-8.\nPadrões:\nO código no core da distribuição Python deve sempre usar UTF-8 (ou ASCII na versão Python 2);\nArquivos usando ASCII (em Python 2) ou UTF-8 (em Python 3) não devem ter uma declaração de encoding;\nNas bibliotecas padrões, encodings não-padrões devem ser usadas apenas com propósito de teste, ou quando um comentário/docstring precisa mencionar um nome de autor que contém caracteres não-ASCII; caso contrário, preferencialmente inclui-se dados não-ASCII por meio dos escapes \\x, \\u, \\U ou \\N;\nPara versões de Python acima da 3.0, os identificadores (nome dado a classes, funcões, variáveis etc) devem conter apenas caracteres ASCII e usar palavras em inglês sempre que possível (em vários casos, abreviações e termos técnicos são usados e não são em inglês). Além disso, strings e comentários também devem estar em ASCII. As exceções são as seguintes: (a) em caso de teste de features não-ASCII; (b) nome de autores. Autores cujos nomes não são baseados no alfabeto latino (set de caracteres latin-1, ISO/IEC 8859-1) devem fornecer uma transliteração dos nomes em ASCII;\nProjetos open source com público global são encorajados a adotar políticas similares.\nImports Padrões\nOs imports de bibliotecas devem estar em linhas separadas: # Correto. import os import sys # Errado. import os, sys Porém, pode-se fazer:\nfrom subprocess import Popen, PIPE Os imports devem ser colocados sempre no topo do arquivo, logo depois de qualquer comentário do módulo ou docstrings, e antes de variáveis globais ou constantes do módulo. Em geral, devem ser agrupados na seguinte ordem:\nImports da biblioteca padrão; Imports de programas de terceiros; Imports de aplicações locais/bibliotecas específicas. Deve haver uma linha branca separando cada grupo.\nImports absolutos \u0026ndash; especificando o caminho inteiro até o pacote \u0026ndash; são recomendados, porque eles geralmente são mais legíveis e tendem a se comportar melhor (ou ao menos dar mensagens de erro melhores) se o sistema de importação estiver configurado incorretamente (como quando um diretório dente do pacote acaba no sys.path): import mypkg.sibling from mypkg import sibling from mypkg.sibling import example Porém, imports relativos explícitos \u0026ndash; especificando o caminho relativo da posição atual até o pacote \u0026ndash; são uma alternativa aceitável a imports absolutos, especialmente quando se lida com layouts complexos de pacotes quando o uso de imports absolutos seria desnecessariamente prolixo:\nfrom . import sibling from .sibling import example Código de bibliotecas padrões deve sempre evitar layouts complexos de pacotes e sempre usar imports absolutos.\nImports relativos implícitos nunca devem ser utilizados e foram removidos do Python 3.\nReferências [1] PEP 1 \u0026ndash; PEP Purpose and Guidelines.\n[2] PEP 8 \u0026ndash; Style Guide for Python Code.\nWhat is UTF-8 Encoding? A Guide for Non-Programmers\nWhat\u0026rsquo;s the difference between a character, a code point, a glyph and a grapheme?\n","date":1607299200,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1638835200,"objectID":"ef250a05a08bc327f01d61fd482c2987","permalink":"https://ansesu.github.io/post/python-pep8/","publishdate":"2020-12-07T00:00:00Z","relpermalink":"/post/python-pep8/","section":"post","summary":"Nos últimos tempos, precisei resgatar os códigos de análises que realizei durante o mestrado. Percebi que eles estão um pouco confusos e difíceis de ler. Com intuito de resolver esse problema, decidi buscar entender quais são as melhores práticas de estilo quando programando em Python. Esse post é, então, uma colinha pra que eu possa sempre estar checando caso esqueça de algo.","tags":["Python","PEP8"],"title":"PEP8 - Melhores práticas de estilo em Python","type":"post"},{"authors":["Haroldo V. Ribeiro","André S. Sunahara","Jack Sutton","Matjaz Perc","Quentin S. Hanley"],"categories":null,"content":"","date":1600819200,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1600819200,"objectID":"f992302134da0ca08917c949f17e4de8","permalink":"https://ansesu.github.io/publication/2020/city-size-and-the-spreading-of-covid-19-in-brazil/","publishdate":"2020-09-23T00:00:00Z","relpermalink":"/publication/2020/city-size-and-the-spreading-of-covid-19-in-brazil/","section":"publication","summary":"The current outbreak of the coronavirus disease 2019 (COVID-19) is an unprecedented example of how fast an infectious disease can spread around the globe (especially in urban areas) and the enormous impact it causes on public health and socio-economic activities. Despite the recent surge of investigations about different aspects of the COVID-19 pandemic, we still know little about the effects of city size on the propagation of this disease in urban areas. Here we investigate how the number of cases and deaths by COVID-19 scale with the population of Brazilian cities. Our results indicate small towns are proportionally more affected by COVID-19 during the initial spread of the disease, such that the cumulative numbers of cases and deaths per capita initially decrease with population size. However, during the long-term course of the pandemic, this urban advantage vanishes and large cities start to exhibit higher incidence of cases and deaths, such that every 1% rise in population is associated with a 0.14% increase in the number of fatalities per capita after about four months since the first two daily deaths. We argue that these patterns may be related to the existence of proportionally more health infrastructure in the largest cities and a lower proportion of older adults in large urban areas. We also find the initial growth rate of cases and deaths to be higher in large cities; however, these growth rates tend to decrease in large cities and to increase in small ones over time.","tags":["COVID-19","Cidades","Sistemas complexos"],"title":"City size and the spreading of COVID-19 in Brazil","type":"publication"},{"authors":null,"categories":null,"content":"Tesestrete\n","date":1593734400,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":1593734400,"objectID":"bdefae70dcd0936346064f2cf1971c6b","permalink":"https://ansesu.github.io/project/observatorio-covid/","publishdate":"2020-07-03T00:00:00Z","relpermalink":"/project/observatorio-covid/","section":"project","summary":"Acompanhando a evolução da COVID-19 em Maringá","tags":["COVID-19","Maringá"],"title":"Observatório COVID-19 Maringá","type":"project"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":-62135596800,"objectID":"6d99026b9e19e4fa43d5aadf147c7176","permalink":"https://ansesu.github.io/contact/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/contact/","section":"","summary":"","tags":null,"title":"Contato","type":"widget_page"},{"authors":null,"categories":null,"content":"Galeria de fotos aaaaaaa Galeria de vídeos Final de tarde em Tokyo - 2014\nJamming in Sakae - Nagoya - 2014\nJamming in Sakae - Nagoya - 2014\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"pt","lastmod":-62135596800,"objectID":"665288c8761d48eb3366c37954243edc","permalink":"https://ansesu.github.io/gallery/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/gallery/","section":"","summary":"Galeria de fotos aaaaaaa Galeria de vídeos Final de tarde em Tokyo - 2014\nJamming in Sakae - Nagoya - 2014\nJamming in Sakae - Nagoya - 2014","tags":null,"title":"Galeria","type":"page"}]